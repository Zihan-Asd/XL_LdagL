
from numpy import zeros
from poly import *



class Hamiltonian_sys:
    """
    This class is used to generate LdagL using unknown coupling coefficients
    of the decaying terms and the Hamiltonian terms. The coupling 
    coefficients can be assigned to deduce all relavant terms in LdagL.
    Also, one can reversely, assign relavant LdagL terms to deduce
    the coupling coefficients. For now, we only support 1D nearest 
    neighbor Hamiltonian with open boundary condition.
    ---------
    data structure
    ---------
    Every term A in LdagL generated from terms in L will be coded into
    an array of data that specifies this term and how this term is 
    generated by terms in L. So that if we assign the coupling 
    coefficients, we would be able to directly deduce the coefficient of
    A. And also, by assigning the coefficient of every term in LdagL, we can 
    directly form a set of equations to solve for the coupling coefficients.
    """

    def __init__(self,N):
        self.N = N      # N is the number of lattice sites
        self.LdagL = []     #
        self.fourbody = []
        self.threebody = []
        self.twobody = []
        self.onebody = []
        self.lenth = 0
        pass

    def fourbody_interaction(self):

        H_term = sym_operator()
        for i in range(1,self.N):
            H_term.twobody_append(loc_list=[i,i+1],oper_list=[[1,4],
            [1,4]],coeff_list=[[1,-1],[1,-1]],coupling_type=[2,i])
            H_term.twobody_append(loc_list=[i,i+1],oper_list=[[3],[2]],
            coeff_list=[[1],[1]],coupling_type=[3,i])
            H_term.twobody_append(loc_list=[i,i+1],oper_list=[[2],[3]],
            coeff_list=[[1],[1]],coupling_type=[3,i])
        
        H_conj_term = sym_operator()
        for i in range(1,self.N):
            H_conj_term.twobody_append(loc_list=[-i,-i-1],oper_list=[[1,4],
            [1,4]],coeff_list=[[1,-1],[1,-1]],coupling_type=[2,i])
            H_conj_term.twobody_append(loc_list=[-i,-i-1],oper_list=[[3],[2]],
            coeff_list=[[1],[1]],coupling_type=[3,i])
            H_conj_term.twobody_append(loc_list=[-i,-i-1],oper_list=[[2],[3]],
            coeff_list=[[1],[1]],coupling_type=[3,i])

        F_p_term = sym_operator()
        for i in range(1,self.N+1):
            F_p_term.twobody_append(loc_list=[i,-i],oper_list=[[2],[2]],
            coeff_list=[[1],[1]],coupling_type=[1,i])
        
        F_m_term = sym_operator()
        for i in range(1,self.N+1):
            F_m_term.twobody_append(loc_list=[i,-i],oper_list=[[3],[3]],
            coeff_list=[[1],[1]],coupling_type=[1,i])

        

        # The (4,0)-interaction terms
        
        for i in range(1,self.N):
            for j in range(i+2,self.N):
                oper_a_list = finder([i,i+1],H_term.twobody)
                oper_b_list = finder([j,j+1],H_term.twobody)
                #print("this is oper_a",oper_a_list)
                #print("this is oper_b",oper_b_list)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,1))
        
        # The (3,1)-interaction terms


        for i in range(1,self.N):
            for j in range(1,i):
                oper_a_list = finder([i,i+1],H_term.twobody)
                oper_b_list = finder([j,-j],F_p_term.twobody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,1j))
            for j in range(i+2,self.N+1):
                oper_a_list = finder([i,i+1],H_term.twobody)
                oper_b_list = finder([j,-j],F_p_term.twobody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,1j))

        for i in range(1,self.N):
            for j in range(1,i):
                oper_a_list = finder([i,i+1],H_term.twobody)
                oper_b_list = finder([j,-j],F_m_term.twobody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,-1j))
            for j in range(i+2,self.N+1):
                oper_a_list = finder([i,i+1],H_term.twobody)
                oper_b_list = finder([j,-j],F_m_term.twobody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,-1j))
                
        # The (2,2)-interaction terms
        for i in range(1,self.N):
            for j in range(i+1,self.N+1):
                oper_a_list = finder([i,-i],F_m_term.twobody)
                oper_b_list = finder([j,-j],F_p_term.twobody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,1))
        
        for i in range(1,self.N):
            for j in range(i+1,self.N+1):
                oper_a_list = finder([i,-i],F_p_term.twobody)
                oper_b_list = finder([j,-j],F_m_term.twobody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,1))

        for i in range(1,self.N):
            for j in range(1,self.N):
                oper_a_list = finder([i,i+1],H_term.twobody)
                oper_b_list = finder([-j,-j-1],H_conj_term.twobody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.fourbody.append(oper_prod(oper_a,oper_b,-2))
        



    def threebody_interaction(self):
        F_p_term = sym_operator()
        for i in range(1,self.N+1):
            F_p_term.twobody_append(loc_list=[i,-i],oper_list=[[2],[2]],
            coeff_list=[[1],[1]],coupling_type=[1,i])
        
        F_m_term = sym_operator()
        for i in range(1,self.N+1):
            F_m_term.twobody_append(loc_list=[i,-i],oper_list=[[3],[3]],
            coeff_list=[[1],[1]],coupling_type=[1,i])
        
        decay_down_term = sym_operator()
        for i in range(1,self.N+1):
            decay_down_term.onebody_append(loc=i,oper_list=[4],coeff_list=[1],
            coupling_type=(1,i))
        
        decay_updown_term = sym_operator()
        for i in range(1,self.N+1):
            decay_updown_term.onebody_append(loc=i,oper_list=[1,4],
            coeff_list=[1,-1],coupling_type=(1,i))
        
        down_p = sym_operator()
        for i in range(1,self.N):
            down_p.twobody_append(loc_list=[i,i+1],oper_list=[[4],[2]],
            coeff_list=[[1],[1]],coupling_type=[3,i])
        
        down_m = sym_operator()
        for i in range(1,self.N):
            down_m.twobody_append(loc_list=[i,i+1],oper_list=[[4],[3]],
            coeff_list=[[1],[1]],coupling_type=[3,i])

        p_down = sym_operator()
        for i in range(1,self.N):
            p_down.twobody_append(loc_list=[i,i+1],oper_list=[[2],[4]],
            coeff_list=[[1],[1]],coupling_type=[3,i])

        m_down = sym_operator()
        for i in range(1,self.N):
            m_down.twobody_append(loc_list=[i,i+1],oper_list=[[3],[4]],
            coeff_list=[[1],[1]],coupling_type=[3,i])
        
        decay_m = sym_operator()
        for i in range(1,self.N+1):
            decay_m.onebody_append(loc=-i,oper_list=[3],coeff_list=[1],
            coupling_type=[1,i])
        
        decay_p = sym_operator()
        for i in range(1,self.N+1):
            decay_p.onebody_append(loc=-i,oper_list=[2],coeff_list=[1],
            coupling_type=[1,i])
        
        p_updown = sym_operator()
        for i in range(1,self.N):
            p_updown.twobody_append(loc_list=[i,i+1],oper_list=[[2],[1,4]],
            coeff_list=[[1],[1,-1]],coupling_type=[2,i])
        
        m_updown = sym_operator()
        for i in range(1,self.N):
            m_updown.twobody_append(loc_list=[i,i+1],oper_list=[[3],[1,4]],
            coeff_list=[[1],[1,-1]],coupling_type=[2,i])
        
        updown_p = sym_operator()
        for i in range(1,self.N):
            updown_p.twobody_append(loc_list=[i,i+1],oper_list=[[1,4],[2]],
            coeff_list=[[1,-1],[1]],coupling_type=[2,i])
        
        updown_m = sym_operator()
        for i in range(1,self.N):
            updown_m.twobody_append(loc_list=[i,i+1],oper_list=[[1,4],[3]],
            coeff_list=[[1,-1],[1]],coupling_type=[2,i])
        
        
    
        for i in range(1,self.N):
            for j in range(i+1,self.N+1):
                oper_am_list = finder([i,-i],F_m_term.twobody)
                oper_ap_list = finder([i,-i],F_p_term.twobody)
                oper_bdown_list = finder([j],decay_down_term.onebody)
                oper_adown_list = finder([i],decay_down_term.onebody)
                oper_bm_list = finder([j,-j],F_m_term.twobody)
                oper_bp_list = finder([j,-j],F_p_term.twobody)
                for oper_a in oper_am_list:
                    for oper_b in oper_bdown_list:
                        self.threebody.append(oper_prod(oper_a,oper_b,-0.5))
                for oper_a in oper_ap_list:
                    for oper_b in oper_bdown_list:
                        self.threebody.append(oper_prod(oper_a,oper_b,-0.5))
                for oper_a in oper_adown_list:
                    for oper_b in oper_bm_list:
                        self.threebody.append(oper_prod(oper_a,oper_b,-0.5))
                for oper_a in oper_adown_list:
                    for oper_b in oper_bp_list:
                        self.threebody.append(oper_prod(oper_a,oper_b,-0.5))
        
        for i in range(1,self.N):
            oper_apupdown_list = finder([i,i+1],p_updown.twobody)
            oper_amupdown_list = finder([i,i+1],m_updown.twobody)
            oper_aupdownm_list = finder([i,i+1],updown_m.twobody)
            oper_aupdownp_list = finder([i,i+1],updown_p.twobody)
            oper_adownp_list = finder([i,i+1],down_p.twobody)
            oper_adownm_list = finder([i,i+1],down_m.twobody)
            oper_apdown_list = finder([i,i+1],p_down.twobody)
            oper_amdown_list = finder([i,i+1],m_down.twobody)
            oper_bupdown_list = finder([i+1],decay_updown_term.onebody)
            oper_bm_list = finder([-i],decay_m.onebody)
            oper_bp_list = finder([-i],decay_p.onebody)
            for oper_a in oper_apupdown_list:
                for oper_b in oper_bp_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,1j))
            for oper_a in oper_amupdown_list:
                for oper_b in oper_bm_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,-1j))
            for oper_a in oper_aupdownp_list:
                for oper_b in oper_bp_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,1j))
            for oper_a in oper_aupdownm_list:
                for oper_b in oper_bp_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,-1j))
            for oper_a in oper_adownp_list:
                for oper_b in oper_bp_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,1j))
            for oper_a in oper_adownm_list:
                for oper_b in oper_bm_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,-1j))
            for oper_a in oper_apdown_list:
                for oper_b in oper_bp_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,1j))
            for oper_a in oper_amdown_list:
                for oper_b in oper_bm_list:
                    self.threebody.append(oper_prod(oper_a,oper_b,-1j))
    
            
            
            



                

    def twobody_interaction(self):
        H_updown_l = sym_operator()
        for i in range(1,self.N):
            H_updown_l.onebody_append(loc=i,oper_list=[1,4],coeff_list=[1,-1],
            coupling_type=[2,i])
        H_updown_r = sym_operator()
        for i in range(1,self.N-1):
            H_updown_r.onebody_append(loc=(i+1),oper_list=[1,4],coeff_list=[1,-1],
            coupling_type=[2,i])
        H_m_l = sym_operator()
        for i in range(1,self.N):
            H_m_l.onebody_append(loc=i,oper_list=[3],coeff_list=[1],
            coupling_type=[3,i])
        H_p_l = sym_operator()
        for i in range(1,self.N):
            H_p_l.onebody_append(loc=i,oper_list=[2],coeff_list=[1],
            coupling_type=[3,i])
        H_m_r = sym_operator()
        for i in range(1,self.N-1):
            H_m_r.onebody_append(loc=(i+1),oper_list=[3],coeff_list=[1],
            coupling_type=[3,i])
        H_p_r = sym_operator()
        for i in range(1,self.N-1):
            H_p_r.onebody_append(loc=(i+1),oper_list=[2],coeff_list=[1],
            coupling_type=[3,i])
        F_down = sym_operator()
        for i in range(1,self.N+1):
            F_down.onebody_append(loc=i,oper_list=[4],coeff_list=[1],
            coupling_type=[1,i])
        Hz_m = sym_operator()
        for i in range(1,self.N):
            Hz_m.onebody_append(loc=i,oper_list=[3],coeff_list=[1],
            coupling_type=[2,i])
        Hz_p = sym_operator()
        for i in range(1,self.N):
            Hz_p.onebody_append(loc=i,oper_list=[2],coeff_list=[1],
            coupling_type=[2,i])
        Hr_p = sym_operator()
        for i in range(1,self.N-1):
            Hr_p.onebody_append(loc=(i+1),oper_list=[2],coeff_list=[1],
            coupling_type=[3,i])
        Hr_m = sym_operator()
        for i in range(1,self.N-1):
            Hr_m.onebody_append(loc=(i+1),oper_list=[3],coeff_list=[1],
            coupling_type=[3,i])
        Hl_p = sym_operator()
        for i in range(1,self.N):
            Hl_p.onebody_append(loc=i,oper_list=[2],coeff_list=[1],
            coupling_type=[3,i])
        Hl_m = sym_operator()
        for i in range(1,self.N):
            Hl_m.onebody_append(loc=i,oper_list=[3],coeff_list=[1],
            coupling_type=[3,i])
        F_m = sym_operator()
        for i in range(1,self.N+1):
            F_m.onebody_append(loc=i,oper_list=[3],coeff_list=[1],
            coupling_type=[1,i])
        F_p = sym_operator()
        for i in range(1,self.N+1):
            F_p.onebody_append(loc=i,oper_list=[2],coeff_list=[1],
            coupling_type=[1,i])
        
        
        Hl_down = sym_operator()
        for i in range(1,self.N):
            Hl_down.onebody_append(loc=i,oper_list=[4],coeff_list=[1],
            coupling_type=[3,i])
        Hl_up = sym_operator()
        for i in range(1,self.N):
            Hl_up.onebody_append(loc=i,oper_list=[1],coeff_list=[1],
            coupling_type=[3,i])
        Hr_down = sym_operator()
        for i in range(1,self.N-1):
            Hr_down.onebody_append(loc=(i+1),oper_list=[4],coeff_list=[1],
            coupling_type=[3,i])
        Hr_up = sym_operator()
        for i in range(1,self.N-1):
            Hr_up.onebody_append(loc=(i+1),oper_list=[1],coeff_list=[1],
            coupling_type=[3,i])
        


        for i in range(1,self.N-1):
            oper_aupdown_list = finder([i],H_updown_l.onebody)
            oper_am_list = finder([i],H_m_l.onebody)
            oper_ap_list = finder([i],H_p_l.onebody)
            oper_bupdown_list = finder([i+2],H_updown_r.onebody)
            oper_bp_list = finder([i+2],H_p_r.onebody)
            oper_bm_list = finder([i+2],H_m_r.onebody)
            for oper_a in oper_aupdown_list:
                for oper_b in oper_bupdown_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,2))
            for oper_a in oper_am_list:
                for oper_b in oper_bp_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,1))
            for oper_a in oper_ap_list:
                for oper_b in oper_bm_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,1))
        
        for i in range(1,self.N):
            oper_azm_list = finder([i],Hz_m.onebody)
            oper_azp_list = finder([i],Hz_p.onebody)
            oper_brm_list = finder([i+1],Hr_m.onebody)
            oper_brp_list = finder([i+1],Hr_p.onebody)
            oper_aldown_list = finder([i],Hl_down.onebody)
            oper_alup_list = finder([i],Hl_up.onebody)
            oper_brdown_list = finder([i+1],Hr_down.onebody)
            oper_brup_list = finder([i+1],Hr_up.onebody)
            oper_arp_list = finder([i+1],Hr_p.onebody)
            oper_arm_list = finder([i+1],Hr_m.onebody)
            oper_bm_list = finder([i],F_m.onebody)
            oper_bp_list = finder([i],F_p.onebody)
            oper_alp_list = finder([i],Hl_p.onebody)
            oper_alm_list = finder([i],Hr_p.onebody)
            oper_bmr_list = finder([i+1],F_m.onebody)
            oper_bpr_list = finder([i+1],F_p.onebody)

            for oper_a in oper_azm_list:
                for oper_b in oper_brp_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,-2))
            for oper_a in oper_azp_list:
                for oper_b in oper_brm_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,-2))
            for oper_a in oper_aldown_list:
                for oper_b in oper_brup_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,1))
            for oper_a in oper_alup_list:
                for oper_b in oper_brdown_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,1))
            for oper_a in oper_arp_list:
                for oper_b in oper_bm_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,0.5j))
            for oper_a in oper_arm_list:
                for oper_b in oper_bp_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,-0.5j))
            for oper_a in oper_alp_list:
                for oper_b in oper_bmr_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,0.5j))
            for oper_a in oper_alm_list:
                for oper_b in oper_bpr_list:
                    self.twobody.append(oper_prod(oper_a,oper_b,-0.5j))
        
        for i in range(1,self.N):
            for j in range(i+1,self.N+1):
                oper_a_list = finder([i],F_down.onebody)
                oper_b_list = finder([j],F_down.onebody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.twobody.append(oper_prod(oper_a,oper_b,0.5))
            
        # (1,1)-interaction terms:
        F_conj_down = sym_operator()
        for i in range(1,self.N+1):
            F_conj_down.onebody_append(loc=-i,oper_list=[4],coeff_list=[1],
            coupling_type=[1,i])
        
        for i in range(1,self.N):
            for j in range(i+1,self.N+1):
                oper_a_list = finder([i],F_down.onebody)
                oper_b_list = finder([-j],F_conj_down.onebody)
                for oper_a in oper_a_list:
                    for oper_b in oper_b_list:
                        self.twobody.append(oper_prod(oper_a,oper_b,0.5))
        




    def onebody_interaction(self):
        for i in range(1,self.N+1):
            self.onebody.append([[[i],[4],[]],[0.25,[[1,i],[1,i]]]])
    

    
    def simplify(self):
        self.fourbody = simplifier(self.fourbody)
        self.threebody = simplifier(self.threebody)
        self.twobody = simplifier(self.twobody)
        self.onebody = simplifier(self.onebody)
    
    def combine(self):
        self.LdagL = self.fourbody+self.threebody+self.twobody+self.onebody

    def length_count(self):
        self.lenth = len(self.LdagL)



class sym_operator:
    """
    This class is used for symbolic calculations on operators
    """
    
    def __init__(self):
        self.opt = []
        self.twobody = []
        self.onebody = []

    def twobody_append(self,loc_list,oper_list,coeff_list,coupling_type):
        for i in range(len(oper_list[0])):
            for j in range(len(oper_list[1])):
                self.twobody.append([loc_list,[oper_list[0][i],
                oper_list[1][j]],[coeff_list[0][i]*coeff_list[1][j]],
                coupling_type
                ])
    
    def onebody_append(self,loc,oper_list,coeff_list,coupling_type):
        for i in range(len(oper_list)):
            self.onebody.append([[loc],[oper_list[i]],[coeff_list[i]],coupling_type])


def finder(loc_list,oper):
    """This is used to find all operators on certain locations"""
    oper_temp = []
    for oper_i in oper:
        if loc_list == oper_i[0]:
            oper_temp.append(oper_i)
    return oper_temp






def oper_prod(oper_a,oper_b,coeff_factor):
    """This is used for operator products"""
    loc_a = oper_a[0]
    loc_b = oper_b[0]
    order = []
    for i in range(len(loc_a)):
        order.append((1,i))
    for i in range(len(loc_b)):
        order.append((2,i))
    loc_temp = [list(loc_a)+list(loc_b),order]
    for i in range(len(loc_temp[0])):
        for j in range(len(loc_temp[0])):
            if loc_temp[0][-j-1] < 0 :
                if j<(len(loc_temp[0])-1):
                    if loc_temp[0][-j-2]<0 and abs(loc_temp[0][-j-2])>abs(
                        loc_temp[0][-j-1]):
                        temp_loc = loc_temp[0][-j-2]
                        temp_ord = loc_temp[1][-j-2]
                        loc_temp[0][-j-2] = loc_temp[0][-j-1]
                        loc_temp[1][-j-2] = loc_temp[1][-j-1]
                        loc_temp[0][-j-1] = temp_loc
                        loc_temp[1][-j-1] = temp_ord
            else:
                if j<(len(loc_temp[0])-1):
                    if loc_temp[0][-j-2]<0 or abs(loc_temp[0][-j-2])>abs(
                        loc_temp[0][-j-1]):
                        temp_loc = loc_temp[0][-j-2]
                        temp_ord = loc_temp[1][-j-2]
                        loc_temp[0][-j-2] = loc_temp[0][-j-1]
                        loc_temp[1][-j-2] = loc_temp[1][-j-1]
                        loc_temp[0][-j-1] = temp_loc
                        loc_temp[1][-j-1] = temp_ord
    loc_temp = [loc_temp[0],loc_temp[1]]
    oper_type = []
    for k in loc_temp[1]:
        if k[0]==1:
            oper_type.append(oper_a[1][k[1]])
        else:
            oper_type.append(oper_b[1][k[1]])
    oper_type = list(oper_type)
    coeff = oper_a[2][0]*oper_b[2][0]*coeff_factor
    if oper_a[3][0]<oper_b[3][0]:
        coupling_type=[oper_a[3],oper_b[3]]
    elif oper_a[3][0]==oper_b[3][0] and oper_a[3][1]<oper_b[3][1]:
        coupling_type = [oper_a[3],oper_b[3]]
    else:
        coupling_type = [oper_b[3],oper_a[3]]

    oper_result = [[loc_temp[0],oper_type,[]],[coeff,coupling_type]]
    #print(oper_result)
    return oper_result
                

def simplifier(interaction):
    """This function is used to combine terms corresponding 
    to the same operator in the original list of all interaction terms
    """
    temp = []
    for term in interaction:
        if present(term,temp):
            continue
        reservior = gather(term,interaction)
        list_coupling = coupling_list(reservior)
        single_term = []
        for coupling_term in list_coupling:
            temp_coeff = coeff_gather(coupling_term,reservior)
            single_term.append([temp_coeff,coupling_term])
        temp.append([term[0],single_term])
    return temp


def present(term,term_list):
    for iter in term_list:
        if term[0] == iter[0]:
            return 1
    return 0

def gather(term,term_list):
    temp = []
    for iter in term_list:
        if term[0] == iter[0]:
            temp.append(iter)
    return temp

def present_coupling(term,coupling_list):
    for iter in coupling_list:
        if term[1][1] == iter:
            return 1
    return 0

def coupling_list(term_list):
    temp = []
    for iter in term_list:
        if present_coupling(iter,temp):
            continue
        temp.append(iter[1][1])
    return temp

def coeff_gather(coupling_term,term_list):
    temp = 0
    for iter in term_list:
        if iter[1][1] == coupling_term:
            temp = temp + iter[1][0]
    return temp


def convertor(term_list,var_list,N):
    """ This function is used to convert a list of interaction
    terms to a set of equations.
    """
    temp = polygen(3*N-2,2)
    # The default ordering is set such that the single 
    # particle decaying terms are at the end.
    for iter in term_list:
        constant_coeff = 0
        single_equ = []
        for coupling_term in iter[1]:
            single_equ.append(get_variable(coupling_term,N))
            constant_coeff = constant_coeff + get_constant(coupling_term,var_list,N)
        temp_f = np.zeros(3*N-2).tolist()
        temp_int = [int(iter) for iter in temp_f]
        const_term = [-constant_coeff] + temp_int
        single_equ.append(const_term)
        temp.polysys.append(single_equ)
    return temp


def get_variable(coupling_term,N):
    term_1 = var_numerator(coupling_term[1][0],N)
    term_2 = var_numerator(coupling_term[1][1],N)
    temp_f = np.zeros(3*N-2).tolist()
    temp = [int(iter) for iter in temp_f]
    coeff = coupling_term[0]
    if term_1 == term_2:
        temp[term_1] = 2
        return [coeff]+temp
    temp[term_1] = 1
    temp[term_2] = 1
    return [coeff]+temp

def get_constant(coupling_term,var_list,N):
    term_1 = var_numerator(coupling_term[1][0],N)
    term_2 = var_numerator(coupling_term[1][1],N)
    coeff = coupling_term[0]*var_list[term_1]*var_list[term_2]
    return coeff



def var_numerator(coupling_type,N):
    if coupling_type[0] == 1:
        return 2*N-3+coupling_type[1]
    if coupling_type[0] == 2:
        return coupling_type[1]-1
    if coupling_type[0] == 3:
        return N-2+coupling_type[1]

def var_list_generator(decay,coupling_z,coupling,N):
    temp = []
    for i in range(N-1):
        temp.append(coupling_z)
    for i in range(N-1):
        temp.append(coupling)
    for i in range(N):
        temp.append(decay)
    return temp

def var_rand_list_generator(N):
    temp = []
    for i in range(N-1):
        temp.append(random.random())
    for i in range(N-1):
        temp.append(random.random())
    for i in range(N):
        temp.append(random.random())
    return temp 